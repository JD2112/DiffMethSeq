/*
 * -------------------------------------------------
 *  Differential Methylation Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

params {
  outdir = "${baseDir}/results"
  tracedir = "${params.outdir}/pipeline_info/"
} 

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
process.container = 'jd21/r-nf:240129'

// Load base.config by default for all pipelines
includeConfig "$baseDir/conf/base.config"

docker.runOptions = '-u \$(id -u):\$(id -g)'

// Load igenomes.config if required

profiles {
  conda { process.conda = "$baseDir/environment.yml" }
  docker { 
    params.matk_jar = "/MATK-1.0.jar"
    docker.enabled = true
    docker.runOptions = '-u $(id -u):$(id -g)'
  }
  debug { process.beforeScript = 'echo $HOSTNAME' }

  local {
    // Don't load any config (for use with custom home configs)
  }
  singularity {
    singularity.enabled = true
  }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'DNAm'
  author = 'Jyotirmoy Das'
  homePage = 'https://github.com/JD2112/dnam'
  description = 'An integrated analysis pipeline for DNA Methylation data based on Nextflow.'
  mainScript = 'main.nf'
  nextflowVersion = '>=19.04.0'
  version = '1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
